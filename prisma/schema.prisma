// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum SeatStatus {
    EMPTY
    OCCUPIED
    TEMP_OCCUPIED
}

model Seat {
    id             String     @id @default(cuid())
    label          String
    column         Int
    row            Int
    indexFromLeft  Int
    status         SeatStatus
    price          Float
    transform      String
    d              String
    lockedTill     DateTime?
    lockedByUserId String?
    lockedByUser   User?      @relation(fields: [lockedByUserId], references: [id], onDelete: Cascade)
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    order          Order?     @relation(fields: [orderId], references: [id])
    orderId        String?

    @@index([label, column, row, indexFromLeft, status, price, transform, d, lockedTill, lockedByUserId])
}

model Order {
    id                String   @id @default(cuid())
    checkoutSessionId String?
    userId            String
    user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    seat              Seat[]
    receiptUrl        String?
    paidAmount        Float?
    paymentMethod     String?
    createdAt         DateTime @default(now()) @db.Timestamptz(3)
    updatedAt         DateTime @updatedAt @db.Timestamptz(3)
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    lockedSeat    Seat[]
    order         Order[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
